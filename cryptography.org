# -*- mode: org; fill-column: 79; -*-

#+TITLE: Cryptography I
#+AUTHOR: WLHarvey4

#+SUBTITLE: Stanford --- Version {{{VERSION}}} {{{time(%F %R)}}}
#+TEXINFO_FILENAME:cryptography.info
#+TEXINFO_CLASS: info
#+TEXINFO_HEADER:
#+TEXINFO_POST_HEADER:
#+SUBAUTHOR:
#+TEXINFO_DIR_CATEGORY:Computer Science
#+TEXINFO_DIR_TITLE:Cryptography I
#+TEXINFO_DIR_DESC:Learn about cryptographic systems

#+LATEX_CLASS: report
#+LATEX_CLASS_OPTIONS:
#+LATEX_HEADER:
#+LATEX_HEADER_EXTRA:
#+DESCRIPTION:Learn the inner workings of cryptographic systems and how to
#+DESCRIPTION:correctly use them in real-world applications.
#+KEYWORDS:Cryptography
#+SUBTITLE:
#+LATEX_COMPILER: pdflatex
#+DATE: \today

#+MACRO: VERSION 0.0.2

# Place overall introduction into LaTeX Abstract
#+BEGIN_EXPORT latex
\abstract{In this course you will learn the inner workings of cryptographic
systems and how to correctly use them in real-world applications.}
#+END_EXPORT

# Place Info introduction into @Top node
#+BEGIN_EXPORT texinfo
In this course you will learn the inner workings of cryptographic systems and
how to correctly use them in real-world applications.
#+END_EXPORT

* About This Course
:CI:
#+CINDEX:cryptographic systems
#+CINDEX:secret key
:END:

# Place Texinfo PDF introduction into @iftex conditional block
#+TEXINFO: @iftex
In this course you will learn the inner workings of cryptographic systems and
how to correctly use them in real-world applications.
#+TEXINFO: @end iftex

  Cryptography is an indispensable tool for protecting information in computer
  systems.  The course begins with a detailed discussion of how two parties who
  have a shared secret key can communicate securely when a powerful adversary
  eavesdrops and tampers with traffic.  We will examine many deployed protocols
  and analyze mistakes in existing systems.  The second half of the course
  discusses public-key techniques that let two parties generate a shared secret
  key.  Throughout the course participants will be exposed to many exciting
  open problems in the field and work on fun (optional) programming projects.
  In a second course (Crypto II) we will cover more advanced cryptographic
  tasks such as zero-knowledge, privacy mechanisms, and other forms of
  encryption.

* Overview
  @@texinfo:@heading Week 1.@@
  This week's topic is an overview of what cryptography is about as well as our
  first example ciphers.

** Videos

*** Course Overview

*** What is Cryptography

*** History of Cryptography

*** Discrete Probability

*** Discrete Probability Continued

*** Information Theoretic Security and The One Time Pad

** Readings

*** Lecture slides for all six weeks

*** Course overview and additional reading resources

* Stream Ciphers
  You will learn about pseudo-randomness and how to use it for encryption.  We
  will also look at a few basic definitions of secure encryption.

** Videos

*** Stream Ciphers and Pseudo Random Generators

*** Attacks on Stream Ciphers and The One Time Pad

*** Real-World Stream Ciphers

*** PRG Security Definitions

*** Semantic Security

*** Stream Ciphers are Semantically Secure

** Exercises

*** Week 1 Problem Set

*** Week 1 Programming Assignment

* Block Ciphers
:CI:
#+CINDEX: block cipher
#+CINDEX: AES
#+CINDEX: 3DES
:END:
  @@texinfo:@heading Week 2@@
  We introduce a new primitive called a block cipher that will let us build
  more powerful forms of encryption.  We will look at a few classic
  block-cipher constructions (AES and 3DES) and see how to use them for
  encryption.  Block ciphers are the work horse of cryptography and have many
  applications.  Next week we will see how to use block ciphers to provide data
  integrity.  The optional programming assignment this week asks students to
  build an encryption/decryption system using AES.

* Message Integrity
:CI:
#+CINDEX: data integrity
#+CINDEX: authenticate video files
#+CINDEX: hash chain
:END:
  @@texinfo:@heading Week 3@@
  This week's topic is data integrity.  We will discuss a number of classic
  constructions for MAC systems that are used to ensure data integrity.  For
  now we only discuss how to prevent modification of non-secret data.  Next
  week we will come back to encryption and show how to provide both
  confidentiality and integrity.  This week's programming project shows how to
  authenticate large video files.  Even if you don't do the project, please
  read the project description --- it teaches an important concept called a
  hash chain.

* Authenticated Encryption
:CI:
#+CINDEX: authenticated encryption
#+CINDEX: confidentiality
#+CINDEX: integrity
#+CINDEX: symmetric encryption
#+CINDEX: ciphertext attack
:END:
  @@texinfo:@heading Week 4@@
  This week's topic is authenticated encryption: encryption methods that ensure
  both confidentiality and integrity.  We will also discuss a few odds and ends
  such as how to search on encrypted data.  This is our last week studying
  symmetric encryption.  Next week we start with key management and public-key
  cryptography.  As usual there is also an extra credit programming project.
  This week's project involves a bit of networking to experiment with a chosen
  ciphertext attack on a toy web site.

* Basic Key Exchange
:CI:
#+CINDEX: key exchange
#+CINDEX: public key cryptography
#+CINDEX: computational number theory
#+CINDEX: Euclid
#+CINDEX: Fermat
#+CINDEX: Euler
#+CINDEX: Legendre
:END:
  @@texinfo:@heading Week 5@@
  This week's topic is basic key exchange: how to setup a secret key between
  two parties.  For now we only consider protocols secure against
  eavesdropping.  This question motivates the main concepts of public key
  cryptography, but before we build public-key systems we need to take a brief
  detour and cover a few basic concepts from computational number theory.  We
  will start with algorithms dating back to antiquity (Euclid) and work our way
  up to Fermat, Euler, and Legendre.  We will also mention in passing a few
  useful concepts from 20th century math.  Next week we will put our hard work
  from this week to good use and construct several public key encryption
  systems.

* Public-Key Encryption
:CI:
#+CINDEX: public key encryption
#+CINDEX: RSA
#+CINDEX: trapdoor functions
#+CINDEX: Diffie-Hellman protocol
#+CINDEX: chosen ciphertext security (CCA Security)
:END:
  @@texinfo:@heading Week 6@@
  This week's topic is public key encryption: how to encrypt using a public key
  and decrypt using a secret key.  Public key encryption is used for key
  management in encrypted file systems, in encrypted messaging systems, and for
  many other tasks.  The videos cover two families of public key encryption
  systems: one based on trapdoor functions (RSA in particular) and the other
  based on the Diffie-Hellman protocol.  We construct systems that are secure
  against tampering, also known as chosen ciphertext security (CCA security).
  There has been a ton of research on CCA security over the past decade and
  given the allotted time we can only summarize the main results from the last
  few years.  The lectures contain suggestions for further readings for those
  interested in learning more about CCA secure public-key systems.  The problem
  set this week involves a bit more math than usual, but should expand your
  understanding of public-key encryption.  Please don't be shy about posting
  questions in the forum.  This is the last week of this Crypto I course.  I
  hope everyone learned a lot and enjoyed the material.  Crypto is a beautiful
  topic with lots of open problems and room for further research.  I look
  forward to seeing you in Crypto II where we will cover additional core topics
  and a few more advanced topics.

* Index
  :PROPERTIES:
  :INDEX:    cp
  :END:

