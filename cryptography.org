# -*- mode: org; fill-column: 79; -*-

#+TITLE: Cryptography I
#+AUTHOR: WLHarvey4
#+DATE: \today
#+SUBTITLE: By Stanford University
#+SUBTITLE: Version {{{VERSION}}} {{{time(%F %R)}}}

#+MACRO: VERSION 0.0.7
#+STARTUP:hidestars

#+TEXINFO_FILENAME:cryptography.info
#+TEXINFO_CLASS: info
#+TEXINFO_HEADER:
#+TEXINFO_POST_HEADER:
#+TEXINFO_DIR_CATEGORY:Computer Science
#+TEXINFO_DIR_TITLE:Cryptography I
#+TEXINFO_DIR_DESC:Learn about cryptographic systems

#+LATEX_CLASS: report
#+LATEX_CLASS_OPTIONS:
#+LATEX_HEADER:
#+LATEX_HEADER_EXTRA:
#+DESCRIPTION:Learn the inner workings of cryptographic systems and how to
#+DESCRIPTION:correctly use them in real-world applications.
#+KEYWORDS:Cryptography
#+LATEX_COMPILER: pdflatex


# Place overall introduction into LaTeX Abstract
#+BEGIN_EXPORT latex
\abstract{In this course you will learn the inner workings of cryptographic
systems and how to correctly use them in real-world applications.}
#+END_EXPORT

# Place Info introduction into @Top node
#+BEGIN_EXPORT texinfo
In this course you will learn the inner workings of cryptographic systems and
how to correctly use them in real-world applications.
#+END_EXPORT

* About This Course
  :PROPERTIES:
  :UNNUMBERED: t
  :END:
  :CI:
  #+CINDEX:cryptographic systems
  #+CINDEX:secret key
  :END:

  # Place Texinfo PDF introduction into @iftex conditional block
  #+TEXINFO: @iftex
  In this course you will learn the inner workings of cryptographic systems and
  how to correctly use them in real-world applications.
  #+TEXINFO: @end iftex

  Cryptography is an indispensable tool for protecting information in computer
  systems.  The course begins with a detailed discussion of how two parties who
  have a shared secret key can communicate securely when a powerful adversary
  eavesdrops and tampers with traffic.  We will examine many deployed protocols
  and analyze mistakes in existing systems.  The second half of the course
  discusses public-key techniques that let two parties generate a shared secret
  key.  Throughout the course participants will be exposed to many exciting
  open problems in the field and work on fun (optional) programming projects.
  In a second course ([[https://www.coursera.org/learn/crypto2][Crypto II]]) we will cover more advanced cryptographic
  tasks such as zero-knowledge, privacy mechanisms, and other forms of
  encryption.

** Instructor
   - Dan Boneh, Professor of Computer Science

   Welcome to Cryptography I!  You’re joining thousands of learners currently
   enrolled in the course.  I'm excited to have you in the class and look
   forward to your contributions to the learning community.

   To begin, I recommend taking a few minutes to explore the course site.
   Review the material we’ll cover each week, and preview the assignments
   you’ll need to complete to pass the course.  Click Discussions to see forums
   where you can discuss the course material with fellow students taking the
   class.

   If you have questions about course content, please post them in the forums
   to get help from others in the course community.  For technical problems
   with the Coursera platform, visit the [[http://learner.coursera.help/][Learner Help Center]].

   Good luck as you get started, and I hope you enjoy the course!

   @@texinfo:@heading Instructor Biography@@
   @@latex:\section*{Instructor Biography}@@
   Professor Dan Boneh heads the applied cryptography group at the Computer
   Science department at Stanford University.  Professor Boneh's research
   focuses on applications of cryptography to computer security.  His work
   includes cryptosystems with novel properties, web security, security for
   mobile devices, digital copyright protection, and cryptanalysis.  He is the
   author of over a hundred publications in the field and a recipient of the
   Packard Award, the Alfred P.@@texinfo:@tie{}@@Sloan Award, and the RSA
   award in mathematics.  Last year Dr.@@texinfo:@tie{}@@Boneh received the
   Ishii award for industry education innovation.  Professor Boneh received
   his Ph.D from Princeton University and joined Stanford in 1997.

* Overview of Cryptography
  :PROPERTIES:
  :UNNUMBERED: t
  :END:

  @@texinfo:@heading Week 1@@
  @@latex:\section*{Week 1}@@
  This week's topic is an overview of what cryptography is about as well as our
  first example ciphers.
** Course Overview
*** Homework and Grading
    - There will be a weekly problem set that includes an optional programming
      component. Participants are expected to solve these assignments on their
      own, but can discuss clarification questions on the course forum.
    - Participants can attempt each of the problem sets three times every 8
      hours. After each submission the system will provide explanations about
      correct and incorrect answers. When participants attempt to solve the
      problem set again, many of the questions will be different.
    - The programming assignments are optional. Participants are free to use
      any language of their choice to solve the programming assignments. Our
      sample code will be given in Python although that code is not required to
      complete these optional assignments.
    - A passing grade be given to participants who obtain more than 80% of the
      maximum score on the problem sets and final exam. The programming
      assignments are optional.
    - In-video quizzes are not graded and are only there to help participants
      with self assessment.
    - Many of the modules contain links to research papers for further
      readings. These are intended for participants interested in learning more
      about the material covered. These further readings are optional.
    - There will be a final exam (no midterm) that is similar in style to the
      problem sets, but covers the material of the entire course.

*** Resources
    - Background on discrete probability :: [[https://en.wikibooks.org/wiki/High_School_Mathematics_Extensions/Discrete_Probability][High School Mathematics Extensions/Discrete Probability]]
    - A course in applied cryptography :: [[https://toc.cryptobook.us][A Graduate Course in Applied Cryptography]]
    - Computational number theory :: [[http://shoup.net/ntb/ntb-v2.pdf][Computational Number Theory]]

*** Welcome Lecture
    Hello, my name is Dan Boneh, and I'd like to welcome you to my course on
    cryptography that I'll be teaching at Stanford University this
    quarter.

    @@texinfo:@heading @@@@latex:\section*{@@Recorded Lectures Experiment@@latex:}@@

    This quarter, I'm experimenting with recording the lectures and having the
    students watch the lectures online. In fact, anyone is welcome to watch the
    lectures, and join the course. This is an experiment, so we'll see how it
    goes.

    @@texinfo:@heading @@@@latex:\section*{@@Goals for the Course@@latex:}@@

    My goals for this course are basically to teach you how cryptographic
    primitives work. But more importantly I'd like to teach you how to use
    cryptographic primitives correctly and reason about the security of your
    constructions. We will see various abstractions of cryptographic
    primitives, and we'll do some security proofs. My goal is that by the end
    of the course you'll be able to reason about the security of cryptographic
    constructions and be able to break ones that are not secure.

    @@texinfo:@heading @@@@latex:\section*{@@How To Take the Course@@latex:}@@

    Now I'd like to say a few words on how I would like you to take the
    class.

    @@texinfo:@subheading @@@@latex:\subsection*{@@Take Notes@@latex:}@@

    First of all, I'm a big believer in taking notes as you listen to the
    lectures. So I would really encourage you to summarize and take notes in
    your own words of the material that's being presented.

    @@texinfo:@subheading @@@@latex:\subsection*{@@Pause the Video@@latex:}@@

    Also I should mention that on the videos, I'm able to go much faster than I
    would go in a normal classroom. And so I would encourage you to
    periodically pause the video and think about the material that's being
    covered and not move forward until the material is clear in your mind.

    @@texinfo:@subheading @@@@latex:\subsection*{@@Do the Pop-Up Questions@@latex:}@@

    Also from time to time, the video will pause and pop-up questions will come
    up. These are intended to kinda help you along with the material, and I
    would really encourage you to answer those questions by yourselves rather
    than skip them. Usually the questions are about the material that has just
    been covered, and so it shouldn't be too difficult to answer the
    questions. So I would really encourage you to do them rather than skip
    them.

    @@texinfo:@heading @@@@latex:\section*{@@How Cryptography Systems Work@@latex:}@@

    Now, by now I'm sure everybody taking the class knows that cryptography is
    used everywhere computers are. It's a very common tool that's used to
    protect data. For example, web traffic is protected using a protocol called
    HTTPS. Wireless traffic, for example, Wi-Fi traffic is protected using the,
    WPA2 protocol, that's part of 801.11i. Cell phone traffic is protected
    using an encryption mechanism in GSM. Bluetooth traffic is protected using
    cryptography, and so on. We're gonna see how these various systems work. In
    fact, we're gonna cover SSL, and in fact, even 802.11i in quite a bit of
    detail. And you'll see how these system work in practice.

    @@texinfo:@subheading @@@@latex:\subsection*{@@File Protections and Authentication@@latex:}@@

    Cryptography is also used for protecting files that are stored on disc by
    encrypting them. So if the disc is stolen, the files are not
    compromised. It's also used for content protection. For example when you
    buy DVDs and Blu-Ray disks, the movies on these disks are encrypted, in
    particular DVD uses a system called CSS, the Content Scrambling System,
    CSS, and Blu-Ray uses a system called AACS. We'll talk about how CSS and
    AACS work. It turns out that CSS is a fairly easy system to break. And
    we'll talk about how, we'll do some cryptanalysis and actually show how to
    break encryption that's used in CSS. Cryptography is also used for user
    authentication and in many, many, many other applications that we'll talk
    about in the next segments.

    @@texinfo: @heading @@@@latex:\section*{@@Secure Communications@@latex:}@@

    Now I wanna go back to secure communication, and talk about the case where,
    here, we have a laptop trying to communicate with a web server. This is a
    good time to also introduce our friends, Alice and Bob, who are gonna be
    with us throughout the quarter. Essentially Alice is trying to communicate
    securely with Bob. Here Alice is on the laptop and Bob is on the
    server. The protocol that's used to do that is called HTTPS, but in fact,
    the actual protocol is called SSL. Sometimes it's called TLS. And the goals
    of these protocols is to basically make sure that as this data travels
    across the network, an attacker first of all can't eavesdrop on this
    data. Second of all, an attacker can't modify the data while it's in the
    network. So no eavesdropping and no tampering

    @@texinfo:@subheading @@@@latex:\subsection*{@@TLS@@latex:}@@

    Now as I said the protocol that's used to secure web traffic called TLS
    actually consists of two parts.

    @@texinfo:@subsubheading @@@@latex:\subsubsection*{@@Handshake Protocol@@latex:}@@

    The first part is called the handshake protocol where Alice and Bob talk
    with one another and at the end of the handshake handshake basically a
    shared secret key appears between the two of them. So both Alice and Bob
    know this secret key, but an attacker looking at the conversation has no
    idea what the key K is.

    @@texinfo:@subheading @@@@latex:\subsubsection*{@@Public Key Cryptography@@latex:}@@

    Now, the way you established your secret key, the way you do the handshake,
    is using public key cryptography techniques, which we're gonna talk about
    in the second part of the course. Now once Alice and Bob have the shared
    key, you can use this key to communicate securely by properly encrypting
    data between them. And in fact this is gonna be the first part of the
    course, which is essentially once the two sides have a shared secret key,
    how do they use that secret key to encrypt and protect data that goes back
    and forth between them?

    @@texinfo:@heading @@@@latex:\section*{@@Protect Files on Disk@@latex:}@@

    Now, as I said, another application of cryptography is to protect files on
    disk. So, here you have a file that happens to be encrypted, so that even
    if the disk is stolen, an attacker can't actually read the contents in the
    file. And, if an attacker tries to modify the data on disk, the data in the
    file while it's on disk, when Alice tries to decrypt this file, that will
    be detected, and she'll then basically ignore the contents of the file. So
    we have both confidentiality confidentiality and integrity for files stored
    on disk.

    @@texinfo:@subheading @@@@latex:\subsection*{@@Encrypted Files and Protected Communication are Equivalent@@latex:}@@

    Now I want to make a minor philosophical point, that in fact storing
    encrypted files on disk is very much the same as protecting communication
    between Alice and Bob. In particular, when you store files on disk, it's
    basically Alice who stores the file today wants to read the file
    tomorrow. So rather than communicating between two parties Alice and Bob,
    in the case of a stored disk encryption, it's Alice today who is
    communicating with Alice tomorrow. But really the two scenarios, secure
    communications, and secure files, are kind of philosophically the
    same.

    @@texinfo:@heading @@@@latex:\section*{@@Symmetric Encryption@@latex:}@@

    Now, the building block for securing traffic is what's called symmetric
    encryption systems. And we're gonna talk, in the first half of the course
    extensively about symmetric encryption systems. So in a symmetric
    encryption system, basically, the two parties, Alice and Bob, share a
    secret key ~k~, which the attacker does not know. Only they know the secret
    key ~k~. Now, they're gonna use a cipher which consists of these two
    algorithms, ~E~ and ~D~. ~E~ is called an /encryption algorithm/ and ~D~ is
    called the /decryption algorithm/. The /encryption algorithm/ takes the
    message and the key as inputs, and produces a corresponding ciphertext. And
    the /decryption algorithm/ does the opposite. It takes the ciphertext as
    input along with the key key and produces the corresponding message.

    @@texinfo:@subheading @@@@latex:\subsection*{@@Stick to Standards@@latex:}@@

    Now, a very important point that I would like to stress.  I'm only gonna
    say this once now and never again, but it is an extremely important
    point. And that is: that the algorithms ~E~ and ~D~, the actual encryption
    algorithms are publicly known. Adversary knows exactly how they work. The
    only thing that's kept secret is the secret key ~k~. Other than that
    everything else is completely public and *it's really important to realize
    that you should only use algorithms that are public* because those
    algorithms have been peer-reviewed by a very large community of hundreds of
    people for many, many, many years, and these algorithms only begin to be
    used once this community has shown that they cannot be broken,
    essentially. So in fact, if somebody comes to you and says, ``hey, I have a
    proprietary cipher that you might want to use'', the answer usually should
    be that you stick to standards, to standard algorithms, and not use a
    proprietary cipher. In fact, there are many examples of proprietary ciphers
    that, as soon as they were reverse engineered, they were easily broken by
    simple analysis.

    @@texinfo:@heading @@@@latex:\section*{@@Two Cases of Symmetric Encryption@@latex:}@@

    Now, even in the simple cases of symmetric encryption which we're gonna
    discuss in the first half of the course, there are actually two cases that
    we're gonna discuss in turn.

    @@texinfo:@subheading @@@@latex:\subsection*{@@One-Time Keys@@latex:}@@

    The first, is when every key is only used to encrypt a single message, we
    call these one time keys. Okay. So for example, when you encrypt email
    messages, it's very common that every single email is encrypted using a
    different symmetric key. Yeah? Different symmetric cipher key. Because the
    key is used to encrypt only one message there are actually fairly efficient
    and simple ways of encrypting messages using these one time keys and we'll
    discuss those actually in the next module.

    @@texinfo:@subheading @@@@latex:\subsection*{@@Many-Time Keys@@latex:}@@

    Now there are many cases in fact where keys need to be used to encrypt
    multiple messages. We call these many time keys. For example, when you
    encrypt files in a file system the same key is used to encrypt many many,
    different files. And it turns out if the key is now going to be used to
    encrypt multiple messages we need a little bit of more machinery to make
    sure that the encryption system is secure. In fact after we talk about the
    one-time keys, we will move over and talk about encryption modes that are
    specifically designed for many-time keys. And we'll see that there are a
    couple more steps that need to be taken to ensure security in those cases.

    @@texinfo:@heading @@@@latex:\section*{@@Important Points About Cryptography@@latex:}@@

    Okay, the last point I wanna make is that there are a couple of important
    things to remember about cryptography.

    - Limitations: :: First of all, cryptography, of course, is a fantastic
                      tool for protecting information in computer
                      systems. However, it's also very important that
                      cryptography has its limitations.
    - Limited Solution :: First of all, cryptography is really not the solution
         to all security problems. For example, if you have software bugs then
         very often cryptography is not going to be able to help
         you. Similarly, if you're worried about social engineering attacks,
         where the attacker tries to fool the user into taking actions that are
         going to hurt the user, then cryptography is very often actually not
         going to help you. So it's very important that although it's a
         fabulous tool, it's not the solution to all security problems.
    - Must be Implemented Correctly :: Now another very important point is that
         cryptography essentially becomes useless if it's implemented
         incorrectly. So, for example, there are a number of systems that work
         perfectly fine. And we'll see examples of those systems, that, in
         fact, allow Alice and Bob to communicate. And, in fact, messages that
         Alice sent to Bob, Bob can receive and decrypt. However, because
         cryptography is implemented incorrectly, the systems are completely
         insecure. Actually I should say that I like to mention an old
         encryption standard called WEP this is used for encrypting Wi-Fi
         traffic. WEP contains many mistakes in it and often when I wanna show
         you how not to do things in cryptography I will point to how things
         were done in WEP as an example. So for me, it's very fortunate to have
         an example, a protocol I can point to for how not to do things.
    - Do Not Invent Your Own :: And finally, a very important point that I'd
         like you to remember is that cryptography is not something you should
         try to invent and design yourself. As I said, there are standards in
         cryptography, standard cryptographic primitives which we're gonna
         discuss at length during this course. And primarily you're supposed to
         use these standard cryptographic primitives, and not invent things,
         these primitives, yourself. The standards have all gone through, many
         years of review by hundreds of people, and that's not something that's
         going to happen to an ad hoc design. And, as I said, over the years
         there are many examples of ad hoc designs that were immediately broken
         as soon as they were analyzed.

** What is Cryptography

** History of Cryptography

** Discrete Probability Introduction
   :PROPERTIES:
   :UNNUMBERED: t
   :END:
   :CI:
   #+CINDEX:discrete probability
   :END:

*** Discrete Probability

*** Discrete Probability Continued

** Information Theoretic Security and The One Time Pad
   :CI:
   #+CINDEX:one time pad
   :END:

** Lecture slides for all six weeks

** Course overview and additional reading resources

* Stream Ciphers
  @@texinfo:@heading Week 1 Continued@@
  You will learn about pseudo-randomness and how to use it for encryption.  We
  will also look at a few basic definitions of secure encryption.

** Stream Ciphers and Pseudo Random Generators

** Attacks on Stream Ciphers and The One Time Pad

** Real-World Stream Ciphers

** PRG Security Definitions

** Semantic Security

** Stream Ciphers are Semantically Secure

** Week 1 --- Problem Set

** Week 1 --- Programming Assignment

* Block Ciphers
:CI:
#+CINDEX: block cipher
#+CINDEX: AES
#+CINDEX: 3DES
:END:
  @@texinfo:@heading Week 2@@
  We introduce a new primitive called a block cipher that will let us build
  more powerful forms of encryption.  We will look at a few classic
  block-cipher constructions (AES and 3DES) and see how to use them for
  encryption.  Block ciphers are the work horse of cryptography and have many
  applications.  Next week we will see how to use block ciphers to provide data
  integrity.  The optional programming assignment this week asks students to
  build an encryption/decryption system using AES.

** What are Block Ciphers

** The Data Encryption Standard

** Exhaustive Search Attacks

** More Attacks on Block Ciphers

** The AES Block Cipher

** Block Ciphers From PRGs

** Review --- PRPs and PRFs

** Modes of Operation --- One Time Key

** Security for Many-Time Key --- CPA Security

** Modes of Operation --- Many Time Key -- CBC

** Modes of Operation --- Many Time Key -- CTR
** Week 2 ---- Problem Set
** Week 2 --- Programming Assignment
* Message Integrity
:CI:
#+CINDEX: data integrity
#+CINDEX: authenticate video files
#+CINDEX: hash chain
:END:
  @@texinfo:@heading Week 3@@
  This week's topic is data integrity.  We will discuss a number of classic
  constructions for MAC systems that are used to ensure data integrity.  For
  now we only discuss how to prevent modification of non-secret data.  Next
  week we will come back to encryption and show how to provide both
  confidentiality and integrity.  This week's programming project shows how to
  authenticate large video files.  Even if you don't do the project, please
  read the project description --- it teaches an important concept called a
  hash chain.

** Message Authentication Codes
** MACs Based On PRFs
** CBC-MAC and NMAC
** MAC Padding
** PMAC and the Carter-Wegman MAC
** Introduction
** Generic Birthday Attack
** The Merkle-Damgard Paradigm
** Constructing Compression Functions
** HMAC
** Timing attacks on MAC verification
** Week 3 --- Problem Set
** Week 3 --- Programming Assignment
* Authenticated Encryption
:CI:
#+CINDEX: authenticated encryption
#+CINDEX: confidentiality
#+CINDEX: integrity
#+CINDEX: symmetric encryption
#+CINDEX: ciphertext attack
:END:
  @@texinfo:@heading Week 4@@
  This week's topic is authenticated encryption: encryption methods that ensure
  both confidentiality and integrity.  We will also discuss a few odds and ends
  such as how to search on encrypted data.  This is our last week studying
  symmetric encryption.  Next week we start with key management and public-key
  cryptography.  As usual there is also an extra credit programming project.
  This week's project involves a bit of networking to experiment with a chosen
  ciphertext attack on a toy web site.
** Active Attacks on CPA-Secure Encryption
** Definitions
** Chosen Ciphertext Attacks
** Constructions From Ciphers and MACs
** Case Study --- TLS 1.2
** CBC Padding Attacks
** Attacking Non-Atomic Decryption
** Key Derivation
** Deterministic Encryption
** Deterministic Encryption --- SIV and Wide PRP
** Tweakable Encryption
** Format Preserving Encryption
** Week 4 --- Problem Set
** Week 4 --- Programming Project
* Basic Key Exchange
:CI:
#+CINDEX: key exchange
#+CINDEX: public key cryptography
#+CINDEX: computational number theory
#+CINDEX: Euclid
#+CINDEX: Fermat
#+CINDEX: Euler
#+CINDEX: Legendre
:END:
  @@texinfo:@heading Week 5@@
  This week's topic is basic key exchange: how to setup a secret key between
  two parties.  For now we only consider protocols secure against
  eavesdropping.  This question motivates the main concepts of public key
  cryptography, but before we build public-key systems we need to take a brief
  detour and cover a few basic concepts from computational number theory.  We
  will start with algorithms dating back to antiquity (Euclid) and work our way
  up to Fermat, Euler, and Legendre.  We will also mention in passing a few
  useful concepts from 20th century math.  Next week we will put our hard work
  from this week to good use and construct several public key encryption
  systems.
** Trusted 3rd Parties
** Merkle Puzzles
** The Diffie-Hellman Protocol
** Public-Key Encryption
** Notation
** Fermat and Euler
** Modular e'th Roots
** Arithmetic algorithms
** Intractable Problems
** More background on number theory
** Week 5 --- Problem Set
** Week 5 --- Programming Assignment
* Public-Key Encryption
:CI:
#+CINDEX: public key encryption
#+CINDEX: RSA
#+CINDEX: trapdoor functions
#+CINDEX: Diffie-Hellman protocol
#+CINDEX: chosen ciphertext security (CCA Security)
:END:
  @@texinfo:@heading Week 6@@
  This week's topic is public key encryption: how to encrypt using a public key
  and decrypt using a secret key.  Public key encryption is used for key
  management in encrypted file systems, in encrypted messaging systems, and for
  many other tasks.  The videos cover two families of public key encryption
  systems: one based on trapdoor functions (RSA in particular) and the other
  based on the Diffie-Hellman protocol.  We construct systems that are secure
  against tampering, also known as chosen ciphertext security (CCA security).
  There has been a ton of research on CCA security over the past decade and
  given the allotted time we can only summarize the main results from the last
  few years.  The lectures contain suggestions for further readings for those
  interested in learning more about CCA secure public-key systems.  The problem
  set this week involves a bit more math than usual, but should expand your
  understanding of public-key encryption.  Please don't be shy about posting
  questions in the forum.  This is the last week of this Crypto I course.  I
  hope everyone learned a lot and enjoyed the material.  Crypto is a beautiful
  topic with lots of open problems and room for further research.  I look
  forward to seeing you in Crypto II where we will cover additional core topics
  and a few more advanced topics.
** Definitions and Security
** Constructions
** The RSA Trapdoor Permutation
** PKCS 1
** Is RSA a One-Way Function
** RSA in Practice
** The ElGamal Public-key System
** ElGamal Security
** ElGamal Variants With Better Security
** A Unifying Theme
** Farewell
** Week 6 --- Problem Set
** Week 6 --- Programming Assignment
* Index
  :PROPERTIES:
  :INDEX:    cp
  :END:

